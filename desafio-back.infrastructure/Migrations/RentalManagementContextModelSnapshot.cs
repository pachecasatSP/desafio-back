// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using desafio_back.infrastructure.Repositories.Context;

#nullable disable

namespace desafio_back.infrastructure.Migrations
{
    [DbContext(typeof(RentalManagementContext))]
    partial class RentalManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("desafio_back.domain.Entities.DomainEntities.DeliveryMan", b =>
                {
                    b.Property<int>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("internal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InternalId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("datanascimento");

                    b.Property<string>("CNHImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("imagemcnh");

                    b.Property<string>("CNHNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numerocnh");

                    b.Property<string>("CNHType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tipocnh");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("identificador");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome");

                    b.HasKey("InternalId")
                        .HasName("pk_entregador");

                    b.HasIndex("CNHNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_entregador_numerocnh");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("ix_entregador_cnpj");

                    b.ToTable("entregador", (string)null);
                });

            modelBuilder.Entity("desafio_back.domain.Entities.DomainEntities.Motorcycle", b =>
                {
                    b.Property<int>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("internal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InternalId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("identificador");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modelo");

                    b.Property<string>("Plate")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("placa");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("ano");

                    b.HasKey("InternalId")
                        .HasName("pk_moto");

                    b.HasIndex("Plate")
                        .IsUnique()
                        .HasDatabaseName("ix_moto_placa");

                    b.ToTable("moto", (string)null);
                });

            modelBuilder.Entity("desafio_back.domain.Entities.DomainEntities.Rental", b =>
                {
                    b.Property<int>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("internal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InternalId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("DeliveryManId")
                        .HasColumnType("integer")
                        .HasColumnName("entregador_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("data_termino");

                    b.Property<DateTime>("ForecastEndDate")
                        .HasColumnType("date")
                        .HasColumnName("data_previsao_termino");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("identificador");

                    b.Property<int>("MotorcycleId")
                        .HasColumnType("integer")
                        .HasColumnName("moto_id");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer")
                        .HasColumnName("plan_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("data_inicio");

                    b.HasKey("InternalId")
                        .HasName("pk_locacao");

                    b.HasIndex("DeliveryManId")
                        .HasDatabaseName("ix_locacao_delivery_man_id");

                    b.HasIndex("MotorcycleId")
                        .HasDatabaseName("ix_locacao_motorcycle_id");

                    b.HasIndex("PlanId")
                        .HasDatabaseName("ix_locacao_plan_id");

                    b.ToTable("locacao", (string)null);
                });

            modelBuilder.Entity("desafio_back.domain.Entities.DomainEntities.RentalPlan", b =>
                {
                    b.Property<int>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("internal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InternalId"));

                    b.Property<decimal>("AdditionalDayValue")
                        .HasColumnType("numeric")
                        .HasColumnName("valordiaadicional");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("EarlyPenalty")
                        .HasColumnType("numeric")
                        .HasColumnName("multa_antecipacao");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("identificador");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<int>("TermInDays")
                        .HasColumnType("integer")
                        .HasColumnName("prazoemdias");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("valor");

                    b.HasKey("InternalId")
                        .HasName("pk_plano");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_plano_identificador");

                    b.ToTable("plano", (string)null);
                });

            modelBuilder.Entity("desafio_back.domain.Entities.DomainEntities.RentalReturn", b =>
                {
                    b.Property<int>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("internal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InternalId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("identificador");

                    b.Property<int>("RentalId")
                        .HasColumnType("integer")
                        .HasColumnName("rental_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal")
                        .HasColumnName("value");

                    b.HasKey("InternalId")
                        .HasName("pk_devolucao");

                    b.HasIndex("RentalId")
                        .IsUnique()
                        .HasDatabaseName("ix_devolucao_rental_id");

                    b.ToTable("devolucao", (string)null);
                });

            modelBuilder.Entity("desafio_back.domain.Entities.DomainEntities.Rental", b =>
                {
                    b.HasOne("desafio_back.domain.Entities.DomainEntities.DeliveryMan", "DeliveryMan")
                        .WithMany("RentalCollection")
                        .HasForeignKey("DeliveryManId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locacao_entregador_delivery_man_id");

                    b.HasOne("desafio_back.domain.Entities.DomainEntities.Motorcycle", "Motorcycle")
                        .WithMany("RentalCollection")
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locacao_moto_motorcycle_id");

                    b.HasOne("desafio_back.domain.Entities.DomainEntities.RentalPlan", "Plan")
                        .WithMany("RentalCollection")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locacao_plano_plan_id");

                    b.Navigation("DeliveryMan");

                    b.Navigation("Motorcycle");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("desafio_back.domain.Entities.DomainEntities.RentalReturn", b =>
                {
                    b.HasOne("desafio_back.domain.Entities.DomainEntities.Rental", "Rental")
                        .WithOne("RentalReturn")
                        .HasForeignKey("desafio_back.domain.Entities.DomainEntities.RentalReturn", "RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_devolucao_locacao_rental_id");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("desafio_back.domain.Entities.DomainEntities.DeliveryMan", b =>
                {
                    b.Navigation("RentalCollection");
                });

            modelBuilder.Entity("desafio_back.domain.Entities.DomainEntities.Motorcycle", b =>
                {
                    b.Navigation("RentalCollection");
                });

            modelBuilder.Entity("desafio_back.domain.Entities.DomainEntities.Rental", b =>
                {
                    b.Navigation("RentalReturn");
                });

            modelBuilder.Entity("desafio_back.domain.Entities.DomainEntities.RentalPlan", b =>
                {
                    b.Navigation("RentalCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
