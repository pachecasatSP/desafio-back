// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using desafio_back.infrastructure.Repositories.Context;

#nullable disable

namespace desafio_back.infrastructure.Migrations
{
    [DbContext(typeof(RentalManagementContext))]
    [Migration("20240909104013_initialmigration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("desafio_back.domain.Entities.DomainEntities.RentalPlan", b =>
                {
                    b.Property<int>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("internal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InternalId"));

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identificador");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<int>("PrazoDias")
                        .HasColumnType("integer")
                        .HasColumnName("prazodias");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric")
                        .HasColumnName("valor");

                    b.HasKey("InternalId")
                        .HasName("pk_plano");

                    b.HasIndex("Identificador")
                        .IsUnique()
                        .HasDatabaseName("ix_plano_identificador");

                    b.ToTable("plano", (string)null);
                });

            modelBuilder.Entity("desafio_back.domain.Models.Entities.DeliveryMan", b =>
                {
                    b.Property<int>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("internal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InternalId"));

                    b.Property<string>("Cnpj")
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj");

                    b.Property<DateTime>("Data_nascimento")
                        .HasColumnType("date")
                        .HasColumnName("datanascimento");

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identificador");

                    b.Property<string>("Imagem_cnh")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("imagemcnh");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("nome");

                    b.Property<string>("Numero_cnh")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numerocnh");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Tipo_cnh")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tipocnh");

                    b.HasKey("InternalId")
                        .HasName("pk_entregador");

                    b.ToTable("entregador", (string)null);
                });

            modelBuilder.Entity("desafio_back.domain.Models.Entities.Motorcycle", b =>
                {
                    b.Property<int>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("internal_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InternalId"));

                    b.Property<int>("Ano")
                        .HasColumnType("integer")
                        .HasColumnName("ano");

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identificador");

                    b.Property<string>("Modelo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modelo");

                    b.Property<string>("Placa")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("placa");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("now()");

                    b.HasKey("InternalId")
                        .HasName("pk_moto");

                    b.HasIndex("Placa")
                        .IsUnique()
                        .HasDatabaseName("ix_moto_placa");

                    b.ToTable("moto", (string)null);
                });

            modelBuilder.Entity("desafio_back.domain.Models.Entities.Rental", b =>
                {
                    b.Property<int>("InternalId")
                        .HasColumnType("integer")
                        .HasColumnName("internal_id");

                    b.Property<DateTime>("Data_inicio")
                        .HasColumnType("timestamp")
                        .HasColumnName("data_inicio");

                    b.Property<DateTime>("Data_previsao_termino")
                        .HasColumnType("timestamp")
                        .HasColumnName("data_previsao_termino");

                    b.Property<DateTime>("Data_termino")
                        .HasColumnType("timestamp")
                        .HasColumnName("data_termino");

                    b.Property<int?>("DeliveryManInternalId")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_man_internal_id");

                    b.Property<string>("Entregador_id")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("entregador_id");

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identificador");

                    b.Property<string>("Moto_id")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("moto_id");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("now()");

                    b.HasKey("InternalId")
                        .HasName("pk_locacao");

                    b.HasIndex("DeliveryManInternalId")
                        .HasDatabaseName("ix_locacao_delivery_man_internal_id");

                    b.ToTable("locacao", (string)null);
                });

            modelBuilder.Entity("desafio_back.domain.Models.Entities.Rental", b =>
                {
                    b.HasOne("desafio_back.domain.Models.Entities.DeliveryMan", null)
                        .WithMany("RentalCollection")
                        .HasForeignKey("DeliveryManInternalId")
                        .HasConstraintName("fk_locacao_entregador_delivery_man_internal_id");

                    b.HasOne("desafio_back.domain.Entities.DomainEntities.RentalPlan", "Plano")
                        .WithMany()
                        .HasForeignKey("InternalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_locacao_plano_internal_id");

                    b.HasOne("desafio_back.domain.Models.Entities.DeliveryMan", "DeliveryMan")
                        .WithMany()
                        .HasForeignKey("InternalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_locacao_entregador_internal_id");

                    b.HasOne("desafio_back.domain.Models.Entities.Motorcycle", "Motorcycle")
                        .WithMany()
                        .HasForeignKey("InternalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_locacao_moto_internal_id");

                    b.Navigation("DeliveryMan");

                    b.Navigation("Motorcycle");

                    b.Navigation("Plano");
                });

            modelBuilder.Entity("desafio_back.domain.Models.Entities.DeliveryMan", b =>
                {
                    b.Navigation("RentalCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
